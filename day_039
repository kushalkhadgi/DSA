#include<iostream>
using namespace std;

 class Node
 {
    public:
    int data;
    Node* next;

    Node(int data)
    {
        this->data = data;
        next = NULL;
    }
 };

 class LinkedList
 {
    public:
    void insertatbegin(int data, Node* &head)
    {
        Node* new_node = new Node(data);
        new_node -> next = head;
        head = new_node;
        return;
    }

    void insertatend(int data, Node* &head)
    {
        Node* new_node = new Node(data);
        Node* temp;
        temp = head;

        while(temp->next != NULL)
        {
            temp = temp -> next;
        }
        temp -> next = new_node;
        return;
    }

    void insertatmid(int data, Node* &head, int index)
    {
        if(index == 0)
            return insertatbegin(data, head);
        Node* new_node = new Node(data);
        Node* temp = head;

        for(int i = 0; i < index-1; i++)
        {
            temp = temp->next;
        }
        new_node->next = temp->next;
        temp->next = new_node;
        return;
    }

    void display(Node* head)
    {
        Node *temp = head;
        while(temp != NULL)
        {
            cout<<temp->data<<" ";
            temp= temp -> next;
        }
        cout<<endl;
        return;
    }
 };

 class Question
 {
    void reverse(Node* &head)
    {
        Node* current_position = head;
        Node* previous = NULL;
        Node* next = NULL;

        while(current_position != NULL)
        {
            next = current_position -> next;
            current_position -> next = previous;
            previous = current_position;
            current_position = next;
        }
        head = previous;
        return;
    }

    // void reversefromindex(Node* &head, int index)
    // {
    //     Node* previous = NULL;
    //     Node* next = NULL;
    //     Node* current = head;

    //     for(auto i = 0; i < index; i++)
    //     {
    //         previous -> next = current;
    //         current = current->next;
    //     }

    //     while(current)
    //     {
    //         next = current -> next;
    //         current -> next = previous;
    //         previous = current;
    //         current = next;
    //     }
    //     return;
    // }

    public:
    void getrev(Node* &head)
    {
        reverse(head);
    }
    // void getrevfromindex(Node* &head, int index)
    // {
    //     reversefromindex(head, index);
    // }
 };


 int main()
 {
    Node* mylist = nullptr;
    LinkedList LL;
    Question que;

    LL.insertatbegin(10, mylist);
    LL.insertatend(100, mylist);
    for(int i = 2; i <= 8; i++)
    {
        LL.insertatmid(i*10, mylist, i-1);
    }
    LL.display(mylist);

    que.getrev(mylist);
    LL.display(mylist);

    // que.getrevfromindex(mylist, 6);
    // LL.display(mylist);


    return 0;
 }
