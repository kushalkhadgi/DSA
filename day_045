float intersectionArea(int X1, int Y1, int R1, int X2, int Y2, int R2)
{
    const float pi = 3.14;
    float d, alpha, beta, a1, a2;
    // int answer;
    
    d = sqrt(pow((X2 - X1), 2) + pow((Y2 - Y1), 2));  //Euclidean Distance

    if(d >= R1 + R2)
        return 0.0;
    
    if(d <= (R2 - R1) && R1 >= R2)
        return floor(pi * pow(R2, 2));
    else if(d <= (R2 - R1) && R2 >= R1)
        return floor((pi * pow(R1, 2)));
    else
    {
        alpha = acos((pow(R1, 2) + pow(d, 2) - pow(R2, 2)) / (2 * R1 * d)) * 2;
        beta = acos((pow(R2, 2) + pow(d, 2) - pow(R1, 2)) / (2 * R2 * d)) * 2;

        a1 = 0.5 * beta * pow(R2, 2) - 0.5 * pow(R2, 2) * sin(beta);
        a2 = 0.5 * alpha * pow(R1, 2) - 0.5 * pow(R1, 2) * sin(alpha);

        return floor(a1 + a2);
    }
}

int main()
{
    int X1 = 0, Y1 = 0, R1 = 4;
    int X2 = 6, Y2 = 0, R2 = 4;

    float answer = intersectionArea(X1, Y1, R1, X2, Y2, R2);

    cout<<"Area of Intersection is "<<answer;
    return 0;
}
